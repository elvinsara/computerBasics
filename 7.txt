private static async Task<IList<Event>> GetUpcomingEvents()
{
    try
    {
        // Set up authentication
        var clientSecretCredential = new ClientSecretCredential(
            tenantId,
            clientId,
            clientSecret);

        var graphClient = new GraphServiceClient(clientSecretCredential, new[] { "https://graph.microsoft.com/.default" });

        // Create the URL for the request
        var url = graphClient.Me.Events.Request().GetHttpRequestMessage().RequestUri.ToString();

        // Prepare the query parameters
        var queryParameters = new List<string>
        {
            $"$filter=start/dateTime ge '{DateTime.UtcNow.ToString("o")}'",
            "$orderby=start/dateTime",
            "$select=subject,start,end"
        };

        // Combine the URL with query parameters
        var fullUrl = $"{url}&{string.Join("&", queryParameters)}";

        // Create an HttpRequestMessage
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, fullUrl);

        // Send the request
        var response = await graphClient.HttpProvider.SendAsync(requestMessage);

        // Ensure successful response
        response.EnsureSuccessStatusCode();

        // Parse the response
        var result = await response.Content.ReadAsStringAsync();
        var events = JsonSerializer.Deserialize<EventCollection>(result);

        return events?.Value; // Return the list of events
    }
    catch (ServiceException svcEx)
    {
        Console.WriteLine($"Graph API request error: {svcEx.Message}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Unexpected error: {ex.Message}");
    }

    return null;
}

// Define a model for the response
public class EventCollection
{
    public IList<Event> Value { get; set; }
}
