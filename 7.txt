using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Graph;
using Microsoft.Identity.Client;

namespace OutlookCalendarIntegration
{
    class Program
    {
        private static readonly string clientId = "YOUR_CLIENT_ID";
        private static readonly string tenantId = "YOUR_TENANT_ID";

        static async Task Main(string[] args)
        {
            var events = await GetUpcomingEvents();
            if (events != null)
            {
                Console.WriteLine("Upcoming Events:");
                foreach (var calendarEvent in events)
                {
                    Console.WriteLine($"- {calendarEvent.Subject}: {calendarEvent.Start.DateTime}");
                }
            }
            else
            {
                Console.WriteLine("No upcoming events.");
            }
        }

        private static async Task<IList<Event>> GetUpcomingEvents()
        {
            try
            {
                // Set up interactive authentication
                var clientApp = PublicClientApplicationBuilder.Create(clientId)
                    .WithTenantId(tenantId)
                    .WithRedirectUri("http://localhost") // Ensure this is configured in Azure AD
                    .Build();

                // Scopes for accessing calendar data
                var scopes = new[] { "Calendars.Read" };

                // Prompt user to sign in
                var authResult = await clientApp.AcquireTokenInteractive(scopes).ExecuteAsync();

                var graphClient = new GraphServiceClient(new DelegateAuthenticationProvider(
                    requestMessage =>
                    {
                        requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authResult.AccessToken);
                        return Task.CompletedTask;
                    }));

                // Retrieve events
                var events = await graphClient.Me.Events
                    .Request()
                    .Select(e => new { e.Subject, e.Start, e.End })
                    .OrderBy("start/dateTime")
                    .GetAsync();

                return events.CurrentPage;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving events: {ex.Message}");
                return null;
            }
        }
    }
}
