using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Identity;
using Microsoft.Graph;

namespace OutlookCalendarIntegration
{
    class Program
    {
        private static readonly string tenantId = "YOUR_TENANT_ID";
        private static readonly string clientId = "YOUR_CLIENT_ID";
        private static readonly string clientSecret = "YOUR_CLIENT_SECRET";

        static async Task Main(string[] args)
        {
            var events = await GetUpcomingEvents();
            if (events != null && events.Count > 0)
            {
                Console.WriteLine("Upcoming Events:");
                foreach (var calendarEvent in events)
                {
                    Console.WriteLine($"- {calendarEvent.Subject}: {calendarEvent.Start.DateTime}");
                }
            }
            else
            {
                Console.WriteLine("No upcoming events.");
            }
        }

        private static async Task<IList<Event>> GetUpcomingEvents()
        {
            try
            {
                // Authenticate using ClientSecretCredential
                var clientSecretCredential = new ClientSecretCredential(
                    tenantId,
                    clientId,
                    clientSecret);

                var graphClient = new GraphServiceClient(clientSecretCredential, new[] { "https://graph.microsoft.com/.default" });

                // Define query options to retrieve events
                var options = new List<QueryOption>
                {
                    new QueryOption("startDateTime", DateTime.Now.ToString("o")),
                    new QueryOption("endDateTime", DateTime.Now.AddDays(30).ToString("o"))
                };

                // Retrieve calendar events
                var events = await graphClient.Me.CalendarView
                    .Request(options)
                    .Select("subject,start,end")
                    .OrderBy("start/dateTime")
                    .GetAsync();

                return events.CurrentPage;
            }
            catch (ServiceException svcEx)
            {
                Console.WriteLine($"Graph API request error: {svcEx.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Unexpected error: {ex.Message}");
            }

            return null;
        }
    }
}
