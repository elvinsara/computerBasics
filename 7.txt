using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Graph;
using Microsoft.Identity.Client;

namespace SharePointListIntegration
{
    class Program
    {
        // Replace with your application credentials and site details
        private static readonly string clientId = "YOUR_CLIENT_ID";       // Azure app registration client ID
        private static readonly string tenantId = "YOUR_TENANT_ID";       // Azure tenant ID
        private static readonly string clientSecret = "YOUR_CLIENT_SECRET"; // Azure app registration client secret
        private static readonly string siteUrl = "https://yourtenant.sharepoint.com/sites/yoursite"; // SharePoint site URL
        private static readonly string listName = "Tasks"; // Name of the SharePoint list

        static async Task Main(string[] args)
        {
            try
            {
                var tasks = await GetSharePointListItems();
                Console.WriteLine("Tasks List:");

                if (tasks.Count == 0)
                {
                    Console.WriteLine("No tasks found.");
                }
                else
                {
                    foreach (var task in tasks)
                    {
                        Console.WriteLine($"- {task.Title}: {task.Description}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        private static async Task<List<SharePointTask>> GetSharePointListItems()
        {
            var client = GetAuthenticatedGraphClient();

            // Get the site ID using the site URL
            var site = await client.Sites.GetByPath("yoursite", "yourtenant.sharepoint.com").Request().GetAsync();

            // Get the list ID based on the list name
            var list = await client.Sites[site.Id].Lists[listName].Request().GetAsync();

            // Get items from the specified SharePoint list
            var items = await client.Sites[site.Id].Lists[list.Id].Items.Request().GetAsync();

            var taskList = new List<SharePointTask>();

            foreach (var item in items)
            {
                // Assuming Title and Description are valid fields in your list
                var task = new SharePointTask
                {
                    Title = item.Fields.AdditionalData.ContainsKey("Title") ? item.Fields.AdditionalData["Title"].ToString() : "No Title",
                    Description = item.Fields.AdditionalData.ContainsKey("Description") ? item.Fields.AdditionalData["Description"].ToString() : "No Description"
                };
                taskList.Add(task);
            }

            return taskList;
        }

        private static GraphServiceClient GetAuthenticatedGraphClient()
        {
            var app = ConfidentialClientApplicationBuilder.Create(clientId)
                .WithTenantId(tenantId)
                .WithClientSecret(clientSecret)
                .Build();

            var scopes = new[] { "https://graph.microsoft.com/.default" };

            // Acquire token for Microsoft Graph
            var authResult = app.AcquireTokenForClient(scopes).ExecuteAsync().Result;

            // Create GraphServiceClient with built-in authentication handling
            var graphClient = new GraphServiceClient(new DelegateAuthenticationProvider((requestMessage) =>
            {
                // Add the token to the request automatically
                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", authResult.AccessToken);
                return Task.CompletedTask;
            }));

            return graphClient;
        }
    }

    public class SharePointTask
    {
        public string Title { get; set; }
        public string Description { get; set; }
    }
}
