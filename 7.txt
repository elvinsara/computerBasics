using System;
using System.Collections.Generic;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Microsoft.Graph;
using Microsoft.Identity.Client;

namespace SharePointListIntegration
{
    class Program
    {
        private static readonly string clientId = "YOUR_CLIENT_ID"; // Replace with your client ID
        private static readonly string tenantId = "YOUR_TENANT_ID"; // Replace with your tenant ID
        private static readonly string clientSecret = "YOUR_CLIENT_SECRET"; // Replace with your client secret
        private static readonly string siteUrl = "https://yourtenant.sharepoint.com/sites/yoursite"; // Replace with your SharePoint site URL
        private static readonly string listName = "Tasks"; // Replace with your SharePoint list name

        static async Task Main(string[] args)
        {
            try
            {
                var tasks = await GetSharePointListItems(siteUrl, listName);
                Console.WriteLine($"{listName} List:");

                if (tasks.Count == 0)
                {
                    Console.WriteLine("No tasks found.");
                }
                else
                {
                    foreach (var task in tasks)
                    {
                        Console.WriteLine($"- {task.Title}: {task.Description}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        private static async Task<List<SharePointTask>> GetSharePointListItems(string siteUrl, string listName)
        {
            var client = GetAuthenticatedGraphClient();

            var site = await client.Sites.GetByPath(siteUrl.Replace("https://", "").Replace("/", ""), null).Request().GetAsync();
            var list = await client.Sites[site.Id].Lists[listName].Request().GetAsync();

            // Get items from the specified SharePoint list
            var items = await client.Sites[site.Id].Lists[list.Id].Items.Request().GetAsync();
            var taskList = new List<SharePointTask>();

            foreach (var item in items)
            {
                var task = new SharePointTask
                {
                    Title = item.Fields.AdditionalData["Title"]?.ToString(),
                    Description = item.Fields.AdditionalData["Description"]?.ToString() // Adjust if your list has a different field name
                };
                taskList.Add(task);
            }

            return taskList;
        }

        private static GraphServiceClient GetAuthenticatedGraphClient()
        {
            var app = ConfidentialClientApplicationBuilder.Create(clientId)
                .WithTenantId(tenantId)
                .WithClientSecret(clientSecret)
                .Build();

            var scopes = new[] { "https://graph.microsoft.com/.default" };

            var authResult = app.AcquireTokenForClient(scopes).ExecuteAsync().Result;
            var graphClient = new GraphServiceClient(new DelegateAuthenticationProvider((requestMessage) =>
            {
                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", authResult.AccessToken);
                return Task.CompletedTask;
            }));

            return graphClient;
        }
    }

    public class SharePointTask
    {
        public string Title { get; set; }
        public string Description { get; set; }
    }
}

